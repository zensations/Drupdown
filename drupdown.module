<?php
function drupdown_menu() {
  return array(
    'drupdown/playground' => array(
      'title' => t('Drupdown Playground'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drupdown_playground'),
      'access callback' => TRUE,
    ),
  );
}

function drupdown_ace_plugins_alter(&$plugins) {
  $plugins['modes']['drupdown'] = array(
    'title' => t('Drupdown'),
    'module' => 'ace/mode/drupdown',
    'attached' => array(
      'js' => array(
        drupal_get_path('module', 'drupdown') . '/js/mode-drupdown.js',
      ),
    ),
  );
  $plugins['toolbars']['drupdown'] = array(
    'title' => t('Drupdown'),
    'module' => 'ace/toolbar/drupdown',
    'attached' => array(
      'js' => array(
        drupal_get_path('module', 'drupdown') . '/js/toolbar-drupdown.js',
      ),
      'css' => array(
        drupal_get_path('module', 'drupdown') . '/drupdown.css',
      ),
      'library' => array(
        array('system', 'ui.dialog'),
        array('system', 'ui.autocomplete'),
        array('system', 'effects.fade'),
      ),
    ),
  );
}

function drupdown_playground($form, &$form_state) {
  $content = drupdown_to_html(@$form_state['values']['input'], array('styles' => array('original' => 'original')));
  $form = array(
    'input' => array(
      '#type' => 'textarea',
      '#ace' => TRUE,
      '#ace_format' => 'drupdown',
    ),
    'transform' => array(
      '#type' => 'button',
      '#value' => t('Transform'),
      '#ajax' => array(
        'wrapper' => 'drupdown-playground-output',
        'callback' => 'drupdown_playground_callback',
        'effect' => 'fade',
      ),
    ),
    'output' => array(
      '#prefix' => '<div id="drupdown-playground-output">',
      '#suffix' => '</div>',
      'formatted' => array(
        '#prefix' => '<div class="formatted-output clearfix">',
        '#suffix' => '</div>',
        '#markup' => $content,
      ),
      'raw' => array(
        '#prefix' => '<pre class="raw-output">',
        '#suffix' => '</pre>',
        '#markup' => htmlentities($content),
      ),
    ),
  );
  return $form;
}

/**
 * Implements hook_filter_info().
 */
function drupdown_filter_info() {
  $filters['filter_drupdown'] = array(
    'title' => t('Drupdown'),
    'description' => t('Extended Markdown with Drupal flavor.'),
    'process callback' => '_drupdown_process',
    'settings callback' => '_drupdown_settings',
    'default settings' => array('styles' => array()),
  );
  return $filters;
}

function _drupdown_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $settings['styles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available image styles'),
    '#options' => array(
      'original' => 'original',
    ),
    '#default_value' => $filter->settings['styles'],
  );
  foreach (array_keys(image_styles()) as $style) {
    $settings['styles']['#options'][$style] = $style;
  }
  return $settings;
}

/**
 * Main process callback.
 */
function _drupdown_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  return drupdown_to_html($text, $filter->settings);
}

function drupdown_playground_callback($form, $form_state) {
  return $form['output'];
}

function drupdown_to_html($input, $settings) {
  module_load_include('inc', 'drupdown', 'markdown');
  module_load_include('inc', 'drupdown', 'drupdown');
  $parser = new DrupdownParser($settings);
	return $parser->transform($input);
}

function drupdown_process_reference($text, $url, $title, $modifier, $settings) {
  // remove leading slashes
  $url = preg_replace('/^\//', '', $url);
  $classes = array(
    '!' => '.drupdown-center',
    '>' => '.drupdown-right',
    '<' => '.drupdown-left',
  );
  $patterns = drupdown_url_patterns();
  foreach ($patterns as $pattern => $callback) {
    if (preg_match($pattern, $url, $matches)) {
      $result = call_user_func_array($callback, array($text, $url, $title, $modifier, $settings, $matches));
      if (strlen($result) > 0) {
        return $result;
      }
    }
  }
}

function drupdown_url_patterns() {
  $patterns = array();
  $patterns['/^(.*?)(\:\/\/?).*\.(png|jpg|jpeg|gif)$/i'] = '_drupdown_image_callback';
  $patterns['/.*/'] = '_drupdown_link_callback';
  return $patterns;
}

function _drupdown_image_callback($text, $url, $title, $modifier, $settings, $matches) {
  $protocol = $matches[1];
  if (!@$settings['styles'][$protocol]) {
    return false;
  }
  if ($protocol == 'original') {
    $protocol = 'public';
    $url = str_replace('original://', 'public://', $url);
  }
  if (!in_array($protocol, array('http', 'https', 'public', 'private'))) {
    if (in_array($protocol, array_keys(image_styles()))) {
      $url = image_style_url($protocol, str_replace($protocol, 'public', $url));
    }
    else {
      return FALSE;
    }
  }

  if ($modifier == '') {
    return FALSE;
  }

  $float = array(
    '!' => 'center',
    '<' => 'left',
    '>' => 'right',
  );

  return theme('figure', array(
    'content' => theme('image', array(
      'path' => $url,
      'title' => $title,
      'alt' => $text,
    )),
    'caption' => $title,
    'float' => $float[$modifier],
  ));
}

function drupdown_theme() {
  return array(
    'figure' => array(
      'variables' => array(
        'content' => FALSE,
        'caption' => FALSE,
        'float' => 'center',
      ),
    ),
  );
}

function theme_figure($variables) {
  $caption = FALSE;
  if (strlen($variables['caption']) > 0) {
    $caption = $variables['caption'];
  }
  $content = '<div class="drupdown-figure-wrapper drupdown-' . $variables['float'] . '">'
    .'<div class="drupdown-figure' . ($caption?' drupdown-with-caption':'') . '">'
    .'<div class="drupdown-figure-content">' . $variables['content'] . '</div>';
  if ($caption) {
    $content .= '<div class="drupdown-caption">' . $caption . '</div>';
  }
  $content .= '</div></div>';
  return $content;
}

function _drupdown_link_callback($text, $url, $title, $modifier, $matches) {
  return l($text, $url, array(
    '#attributes' => array(
      'title' => $title,
    ),
  ));
}

function drupdown_element_info_alter(&$types) {
  $types['managed_file']['#process'][] = 'drupdown_file_element_process';
  $types['text_format']['#process'][] = 'drupdown_text_format_process';
}

function drupdown_file_element_process($element) {
  if (array_key_exists('#file', $element) && is_object($element['#file'])) {
    if (in_array('image_field_widget_process', $element['#process'])) {
      $element['file_uri'] = array(
        '#type' => 'hidden',
        '#value' => str_replace('public://', 'original://', $element['#file']->uri),
        '#attributes' => array('class' => array('drupdown-resource')),
      );
    } else {
      $element['file_uri'] = array(
        '#type' => 'hidden',
        '#value' => $element['#file']->uri,
        '#attributes' => array('class' => array('drupdown-resource')),
      );
    }
  }
  return $element;
}

function drupdown_text_format_process($element) {
  $formats = array_keys($element['format']['format']['#options']);
  $style_settings = array();
  foreach ($formats as $format_id) {
    $filters = filter_list_format($format_id);
    $style_settings[$format_id] = array();
    foreach ($filters as $filter) {
      if ($filter->name == 'filter_drupdown') {
        foreach ($filter->settings['styles'] as $style) {
          if ($style) {
            $style_settings[$format_id][$style] = $style;
          }
        }
      }
    }
  }
  drupal_add_js(array('drupdown' => array('styles' => $style_settings)), 'setting');
  return $element;
}
